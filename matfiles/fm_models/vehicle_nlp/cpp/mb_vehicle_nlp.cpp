/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * mb_vehicle_nlp.cpp
 *
 * Code generation for function 'mb_vehicle_nlp'
 *
 */

/* Include files */
#include "mb_vehicle_nlp.h"
#include <cmath>
#include <math.h>

/* Function Definitions */
void mb_vehicle_nlp(const double states[6], const double controls[5], double
                    statesdot[6], double j_statesdot[66])
{
  double t2;
  double t3_tmp;
  double t4;
  double t5;
  double t6_tmp;
  double t7;
  double t9;
  double t10;
  double t18;
  double t20;
  double t78;
  double t13;
  double t14;
  double t15;
  double t16;
  double t21;
  double t22;
  double t26;
  double t28;
  double t81;
  double t23;
  double t32;
  double t34_tmp;
  double t34;
  double t42;
  double t44;
  double t135;
  double t119_tmp;
  double t119;
  double t49_tmp;
  double t49;
  double t146;
  double t147;
  double t152;
  double t63;
  double t159;
  double b_t16;
  double t156;
  double t160;
  double t162;
  double t61;
  double t86;
  double t145_tmp;
  double t115;
  double t117;
  double t153;
  double t155;
  double t98;
  double t157;
  double t161;
  double t125;
  double t126;
  double in1val1_tmp;
  double b_in1val1_tmp;
  double in1val1;
  double t127;
  double in3val1;
  double in2val1;
  double t3;
  double b_t14[7];
  double b_t7[7];
  double b_t21[7];
  double dv[6];
  double dv1[6];
  double dv2[6];
  int i;
  int i1;
  signed char i2;
  static const signed char b[77] = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };

  double c_tmp_j_input_tpbd853070_1cee_4[66];
  static const signed char b_b[66] = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
  };

  double b_t2[6];
  double dv3[6];
  double dv4[6];

  /* mb_vehicle_nlp */
  /*  File automatically generated by FALCON.m */
  /* === Extract Data From Input ============================================== */
  /* === Jacobians and Hessians =============================================== */
  /*  Combine Variables to states */
  /*  Combine Variables to controls */
  /* === Write Constants ====================================================== */
  /* === Call tpd459cfc5_dac7_4ebd_934b_0d725fb917cf ========================== */
  /* TPD459CFC5_DAC7_4EBD_934B_0D725FB917CF */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9] = TPD459CFC5_DAC7_4EBD_934B_0D725FB917CF(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     21-Apr-2020 15:12:43 */
  t2 = std::abs(states[1]);
  t3_tmp = std::cos(states[3]);
  t4 = std::cos(controls[0]);
  t5 = states[1];
  if (states[1] < 0.0) {
    t5 = -1.0;
  } else {
    if (states[1] > 0.0) {
      t5 = 1.0;
    }
  }

  t6_tmp = std::sin(states[3]);
  t7 = std::sin(controls[0]);
  t9 = states[3] + controls[0];
  t10 = controls[3] * 5.0;
  t18 = controls[3] * 14.0;
  t20 = 1.0 / states[1];
  t78 = states[1] * 164.4344603763146;
  t13 = pow(t2, 4.0);
  t14 = std::cos(t9);
  t15 = states[1] * t6_tmp;
  t16 = std::sin(t9);
  t21 = t20 * t20;
  t22 = 1.0 / t3_tmp;
  t26 = controls[1] * (controls[2] - 1.0);
  t28 = controls[3] * 14.0 - 15.0;
  t81 = pow(t78, t10);
  t23 = t22 * t22;
  t32 = pow(4800.0, -t10);
  t34_tmp = t6_tmp * t20;
  t34 = t34_tmp * t22;
  t42 = t15 + states[2] * 1.37484;
  t44 = -t15 + states[2] * 1.19016;
  t135 = t21 * t22;
  t119_tmp = t5 * pow(t2, 3.0);
  t119 = t5 * 0.46906993728 + t119_tmp * 1.313095619624141E-5;
  t9 = ((-t26 + t2 * 0.46906993728) + t13 * 3.282739049060352E-6) + 58.63374216;
  t49_tmp = t20 * t22;
  t49 = std::atan(t49_tmp * t42);
  t146 = t14 * t9;
  t147 = t16 * t9;
  t152 = ((-(t26 * 1.19016) + t2 * 0.5582682765531648) + t13 *
          3.9069847066296693E-6) + 69.7835345691456;
  t9 = controls[3] * t28;
  t63 = t9 * t32;
  t159 = ((((controls[1] * controls[2] + t9 * 3443.9072847682119) + t2 *
            0.40606054271999992) + t13 * 2.8417741021716482E-6) + t63 * t81 *
          -3443.9072847682119) + 50.757567839999993;
  t26 = std::atan(t49_tmp * t44);
  b_t16 = t34_tmp * t23;
  t15 = t49 * 19.005;
  t156 = (t5 * 0.40606054271999992 + t119_tmp * 1.1367096408686589E-5) +
    -(controls[3] * controls[3] * (t18 - 15.0) * t32 * pow(t78, t10 - 1.0) *
      2.8314851797845978E+6);
  t160 = t6_tmp * t159;
  t162 = ((((-(controls[3] * 96429.403973509936) + controls[3] * t32 * t81 *
             48214.701986754968) + t28 * t32 * t81 * 3443.9072847682119) +
           -(controls[3] * 8.4763711968959825 * (t18 - 15.0) * t32 * t81 *
             17219.536423841058)) + t63 * std::log(t78) * t81 *
          17219.536423841058) + 51658.609271523179;
  t9 = t21 * t23;
  t61 = 1.0 / (t9 * (t42 * t42) + 1.0);
  t63 = 1.0 / (t9 * (t44 * t44) + 1.0);
  t10 = std::atan(t49 * 12.67) / 2.0;
  t28 = controls[0] * 10.96 + -(t26 * 10.96);
  t86 = 1.0 / (t49 * t49 * 160.5289 + 1.0);
  t9 = t15 - t10;
  t145_tmp = t34 - t135 * t42;
  t115 = 1.0 / (t9 * t9 + 1.0);
  t9 = std::atan(-t15 + t10) * 1.3;
  t13 = 1.0 / (t28 * t28 + 1.0);
  t117 = std::cos(t9);
  t10 = std::sin(t9);
  t15 = (-(controls[0] * 16.44) + t26 * 16.44) + std::atan(t28) / 2.0;
  t9 = t49_tmp * t61;
  t153 = t9 * 26.1288342 + -(t9 * t86 * 8.7096114);
  t9 = (b_t16 * t42 + 1.0) * t61;
  t155 = t9 * 19.005 + -(t9 * t86 * 6.335);
  t98 = t13 * 5.48;
  t26 = std::atan(t15) * 1.3;
  t9 = (b_t16 * t44 - 1.0) * t63;
  t157 = t9 * 16.44 + t9 * t13 * -5.48;
  t9 = t63 * (t34 + t135 * t44);
  t161 = t9 * 16.44 + t9 * t13 * -5.48;
  t125 = 1.0 / (t15 * t15 + 1.0);
  t126 = std::sin(t26);
  t15 = t16 * t126;
  in1val1_tmp = t6_tmp * t10;
  b_in1val1_tmp = t3_tmp * t159;
  in1val1 = ((t146 * -0.00080710250201775633 + in1val1_tmp * 3.1862873284907178)
             + t15 * 3.6807102502017761) - b_in1val1_tmp / 1239.0;
  t127 = std::cos(t26);
  t9 = t49_tmp * t63;
  t34 = t9 * 19.5662304 + -(t9 * t13 * 6.5220768);
  t135 = t15 * 4560.4;
  t28 = t14 * t126;
  t81 = t3_tmp * t10;
  t159 = ((t28 * 4560.4 + t81 * 3947.81) + t147) + t160;
  in3val1 = states[2] + t20 * t159 / 1239.0;
  in2val1 = (t10 * 3.0979492582191779 - t4 * t126 * 3.097948438356164) - t7 *
    t152 / 1752.0;

  /*  Hessian Jacobian for tpd459cfc5_dac7_4ebd_934b_0d725fb917cf */
  /*  Calculation of Jacobian with respect to function global input for tpd459cfc5_dac7_4ebd_934b_0d725fb917cf */
  /* === Call tpbe88c1b2_64dd_4786_862f_71e4428e1e5e ========================== */
  /* TPBE88C1B2_64DD_4786_862F_71E4428E1E5E */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9] = TPBE88C1B2_64DD_4786_862F_71E4428E1E5E(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     21-Apr-2020 15:12:45 */
  t32 = std::cos(states[5]);
  t78 = std::sin(states[5]);
  t49 = states[4] * controls[4];
  t9 = t6_tmp * t78;
  t15 = t3_tmp * t32;
  b_t16 = 1.0 / (t49 - 1.0);
  t18 = states[1] * t3_tmp * t78 + states[1] * t32 * t6_tmp;
  t63 = b_t16 * b_t16;
  t42 = t9 + -t15;
  t44 = b_t16 * t18;
  t10 = states[1] * t15 + -(states[1] * t9);
  t22 = controls[4] * t44;
  t23 = b_t16 * t10;
  t49_tmp = states[2] + controls[4] * t23;

  /*  Hessian Jacobian for tpbe88c1b2_64dd_4786_862f_71e4428e1e5e */
  /*  Calculation of Jacobian with respect to function global input for tpbe88c1b2_64dd_4786_862f_71e4428e1e5e */
  /* === Call tpbd853070_1cee_4fb6_afc0_551a36750e15 ========================== */
  /* TPBD853070_1CEE_4FB6_AFC0_551A36750E15 */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9,OUT10,OUT11,OUT12,OUT13,OUT14,OUT15,OUT16,OUT17,OUT18] = TPBD853070_1CEE_4FB6_AFC0_551A36750E15(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     21-Apr-2020 16:01:14 */
  t2 = 1.0 / -t23;
  t3 = t2 * t2;

  /*  Hessian Jacobian for tpbd853070_1cee_4fb6_afc0_551a36750e15 */
  t15 = t6_tmp * t115 * t117;
  t26 = t16 * t125 * t127;
  t13 = t61 * t86 * t145_tmp * -6.335 + t61 * t145_tmp * 19.005;
  b_t14[0] = ((t14 * t119 * -0.00080710250201775633 - t3_tmp * t156 / 1239.0) -
              t15 * t13 * 4.1421735270379338) - t26 * t161 * 4.7849233252623078;
  t9 = t28 * 3.6807102502017761 + t147 / 1239.0;
  b_t14[1] = (((t9 + t160 / 1239.0) + t81 * 3.1862873284907178) - t15 * t155 *
              4.1421735270379338) + t26 * t157 * 4.7849233252623078;
  b_t14[2] = t15 * t153 * -4.1421735270379338 + t26 * t34 * 4.7849233252623078;
  b_t14[3] = t9 + t16 * (t98 - 16.44) * t125 * t127 * 4.7849233252623078;
  b_t14[4] = controls[2] * t3_tmp * -0.00080710250201775633 + t14 * (controls[2]
    - 1.0) / 1239.0;
  b_t14[5] = controls[1] * t3_tmp * -0.00080710250201775633 + controls[1] * t14 /
    1239.0;
  b_t14[6] = t3_tmp * t162 / 1239.0;
  t9 = t115 * t117;
  t15 = t4 * t125 * t127;
  b_t7[0] = (t7 * (t5 * 0.5582682765531648 + t119_tmp * 1.562793882651867E-5) *
             -0.00057077625570776263 - t9 * t13 * 4.0273340356849312) + t15 *
    t161 * 4.0273329698630143;
  b_t7[1] = t9 * t155 * -4.0273340356849312 - t15 * t157 * 4.0273329698630143;
  b_t7[2] = t9 * t153 * -4.0273340356849312 - t15 * t34 * 4.0273329698630143;
  b_t7[3] = (t7 * t126 * 3.097948438356164 - t4 * t152 / 1752.0) - t4 * (t98 -
    16.44) * t125 * t127 * 4.0273329698630143;
  b_t7[4] = t7 * (controls[2] * 1.19016 - 1.19016) / 1752.0;
  b_t7[5] = controls[1] * t7 * 0.00067931506849315071;
  b_t7[6] = 0.0;
  t9 = t3_tmp * t115 * t117;
  t15 = t14 * t125 * t127;
  b_t21[0] = t21 * t159 * -0.00080710250201775633 + t20 * (((t16 * t119 + t6_tmp
    * t156) - t9 * t13 * 5132.153) - t15 * t161 * 5928.52) / 1239.0;
  b_t21[1] = t20 * (((((t135 - t146) + in1val1_tmp * 3947.81) - b_in1val1_tmp) +
                     t9 * t155 * 5132.153) - t15 * t157 * 5928.52) *
    -0.00080710250201775633;
  b_t21[2] = t20 * (t9 * t153 * 5132.153 - t15 * t34 * 5928.52) *
    -0.00080710250201775633 + 1.0;
  b_t21[3] = t20 * ((-t135 + t146) + t14 * (t98 - 16.44) * t125 * t127 * 5928.52)
    / 1239.0;
  b_t21[4] = t20 * (controls[2] * t6_tmp - t16 * (controls[2] - 1.0)) / 1239.0;
  b_t21[5] = t20 * (controls[1] * t6_tmp - controls[1] * t16) / 1239.0;
  b_t21[6] = t34_tmp * t162 * -0.00080710250201775633;
  dv[0] = 0.0;
  dv[1] = t3_tmp * t78 + t32 * t6_tmp;
  dv[2] = t10;
  dv[3] = 0.0;
  dv[4] = t10;
  dv[5] = 0.0;
  dv1[0] = 1.0;
  dv1[1] = -controls[4] * b_t16 * t42;
  dv1[2] = -t22;
  dv1[3] = -(controls[4] * controls[4]) * t63 * t10;
  dv1[4] = -t22;
  dv1[5] = t23 - t49 * t63 * t10;
  dv2[0] = 0.0;
  dv2[1] = b_t16 * t42;
  dv2[2] = t44;
  dv2[3] = controls[4] * t63 * t10;
  dv2[4] = t44;
  dv2[5] = states[4] * t63 * t10;
  for (i = 0; i < 11; i++) {
    t15 = 0.0;
    t26 = 0.0;
    t10 = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      i2 = b[i1 + 7 * i];
      t15 += b_t14[i1] * static_cast<double>(i2);
      t26 += b_t7[i1] * static_cast<double>(i2);
      t10 += b_t21[i1] * static_cast<double>(i2);
    }

    t13 = 0.0;
    t63 = 0.0;
    t28 = 0.0;
    for (i1 = 0; i1 < 6; i1++) {
      i2 = b_b[i1 + 6 * i];
      t13 += dv[i1] * static_cast<double>(i2);
      t63 += dv1[i1] * static_cast<double>(i2);
      t28 += dv2[i1] * static_cast<double>(i2);
    }

    c_tmp_j_input_tpbd853070_1cee_4[6 * i] = t15;
    c_tmp_j_input_tpbd853070_1cee_4[6 * i + 1] = t26;
    c_tmp_j_input_tpbd853070_1cee_4[6 * i + 2] = t10;
    c_tmp_j_input_tpbd853070_1cee_4[6 * i + 3] = t13;
    c_tmp_j_input_tpbd853070_1cee_4[6 * i + 4] = t63;
    c_tmp_j_input_tpbd853070_1cee_4[6 * i + 5] = t28;
  }

  /*  Calculation of Jacobian with respect to function global input for tpbd853070_1cee_4fb6_afc0_551a36750e15 */
  /*  Combine Variables to statesdot */
  statesdot[0] = t2;
  statesdot[1] = in1val1 * t2;
  statesdot[2] = in2val1 * t2;
  statesdot[3] = in3val1 * t2;
  statesdot[4] = t18 * t2;
  statesdot[5] = t49_tmp * t2;
  dv[0] = 0.0;
  dv[1] = 0.0;
  dv[2] = 0.0;
  dv[3] = 0.0;
  dv[4] = 0.0;
  dv[5] = -t3;
  b_t2[0] = t2;
  b_t2[1] = 0.0;
  b_t2[2] = 0.0;
  b_t2[3] = 0.0;
  b_t2[4] = 0.0;
  b_t2[5] = -in1val1 * t3;
  dv1[0] = 0.0;
  dv1[1] = t2;
  dv1[2] = 0.0;
  dv1[3] = 0.0;
  dv1[4] = 0.0;
  dv1[5] = -in2val1 * t3;
  dv2[0] = 0.0;
  dv2[1] = 0.0;
  dv2[2] = t2;
  dv2[3] = 0.0;
  dv2[4] = 0.0;
  dv2[5] = -in3val1 * t3;
  dv3[0] = 0.0;
  dv3[1] = 0.0;
  dv3[2] = 0.0;
  dv3[3] = t2;
  dv3[4] = 0.0;
  dv3[5] = -t18 * t3;
  dv4[0] = 0.0;
  dv4[1] = 0.0;
  dv4[2] = 0.0;
  dv4[3] = 0.0;
  dv4[4] = t2;
  dv4[5] = -t49_tmp * t3;
  for (i = 0; i < 11; i++) {
    t15 = 0.0;
    t26 = 0.0;
    t10 = 0.0;
    t13 = 0.0;
    t63 = 0.0;
    t28 = 0.0;
    for (i1 = 0; i1 < 6; i1++) {
      t9 = c_tmp_j_input_tpbd853070_1cee_4[i1 + 6 * i];
      t15 += dv[i1] * t9;
      t26 += b_t2[i1] * t9;
      t10 += dv1[i1] * t9;
      t13 += dv2[i1] * t9;
      t63 += dv3[i1] * t9;
      t28 += dv4[i1] * t9;
    }

    j_statesdot[6 * i] = t15;
    j_statesdot[6 * i + 1] = t26;
    j_statesdot[6 * i + 2] = t10;
    j_statesdot[6 * i + 3] = t13;
    j_statesdot[6 * i + 4] = t63;
    j_statesdot[6 * i + 5] = t28;
  }
}

void mb_vehicle_nlp_initialize()
{
}

void mb_vehicle_nlp_terminate()
{
  /* (no terminate code required) */
}

/* End of code generation (mb_vehicle_nlp.cpp) */
