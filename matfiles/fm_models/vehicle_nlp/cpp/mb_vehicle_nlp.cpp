/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * mb_vehicle_nlp.cpp
 *
 * Code generation for function 'mb_vehicle_nlp'
 *
 */

/* Include files */
#include "mb_vehicle_nlp.h"
#include <cmath>
#include <math.h>

/* Function Definitions */
void mb_vehicle_nlp(const double states[7], const double controls[5], double
                    statesdot[7], double outputs[3], double j_statesdot[84],
                    double j_outputs[36])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t9;
  double t10;
  double t18;
  double t20;
  double t78;
  double t13;
  double t14;
  double t15;
  double t16;
  double t21;
  double t22;
  double t26;
  double t28;
  double t79;
  double t81;
  double t23;
  double t32;
  double t34_tmp;
  double t42;
  double t44;
  double t163;
  double t119_tmp;
  double t119;
  double t142;
  double t49_tmp;
  double t49;
  double t146;
  double t147;
  double t152;
  double t54;
  double t159;
  double t156_tmp;
  double t156;
  double t160;
  double t162_tmp;
  double b_t162_tmp;
  double t162;
  double t61;
  double t86;
  double t145_tmp;
  double t115;
  double t117;
  double t153;
  double t155;
  double t98;
  double t157;
  double t161;
  double t125;
  double t126;
  double in1val1_tmp;
  double b_in1val1_tmp;
  double in1val1;
  double t127;
  double in3val1;
  double b_t3;
  double in4val1_tmp;
  double in5val1;
  double b_t2;
  double b_t14[7];
  double b_t7[7];
  double b_t21[7];
  double dv[6];
  double dv1[6];
  double dv2[6];
  int i;
  int i1;
  signed char i2;
  static const signed char b[84] = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };

  double c_tmp_j_input_tp0f466f37_8fd8_4[84];
  static const signed char b_b[72] = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  double dv3[7];
  double dv4[7];
  double dv5[7];
  double dv6[7];
  double dv7[12];
  static const double dv8[7] = { 17.21953642384106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
  };

  /* mb_vehicle_nlp */
  /*  File automatically generated by FALCON.m */
  /* === Extract Data From Input ============================================== */
  /* === Jacobians and Hessians =============================================== */
  /*  Combine Variables to states */
  /*  Combine Variables to controls */
  /* === Write Constants ====================================================== */
  /* === Call tpc2db278e_9461_4022_bd68_94b600669896 ========================== */
  /* TPC2DB278E_9461_4022_BD68_94B600669896 */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9,OUT10,OUT11,OUT12,OUT13,OUT14,OUT15,OUT16,OUT17,OUT18] = TPC2DB278E_9461_4022_BD68_94B600669896(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     16-Jun-2020 14:12:52 */
  t2 = std::abs(states[1]);
  t3 = std::cos(states[3]);
  t4 = std::cos(controls[0]);
  t5 = states[1];
  if (states[1] < 0.0) {
    t5 = -1.0;
  } else {
    if (states[1] > 0.0) {
      t5 = 1.0;
    }
  }

  t6 = std::sin(states[3]);
  t7 = std::sin(controls[0]);
  t9 = states[3] + controls[0];
  t10 = controls[3] * 5.0;
  t18 = controls[3] * 14.0;
  t20 = 1.0 / states[1];
  t78 = states[1] * 164.4344603763146;
  t13 = pow(t2, 4.0);
  t14 = std::cos(t9);
  t15 = states[1] * t6;
  t16 = std::sin(t9);
  t21 = t20 * t20;
  t22 = 1.0 / t3;
  t26 = controls[1] * (controls[2] - 1.0);
  t28 = controls[3] * 14.0 - 15.0;
  t79 = std::log(t78);
  t81 = pow(t78, t10);
  t23 = t22 * t22;
  t32 = pow(4800.0, -t10);
  t34_tmp = t6 * t20;
  t9 = t34_tmp * t22;
  t42 = t15 + states[2] * 1.37484;
  t44 = -t15 + states[2] * 1.19016;
  t163 = t21 * t22;
  t119_tmp = t5 * pow(t2, 3.0);
  t119 = t5 * 0.46906993728 + t119_tmp * 1.313095619624141E-5;
  t142 = ((-t26 + t2 * 0.46906993728) + t13 * 3.282739049060352E-6) +
    58.63374216;
  t49_tmp = t20 * t22;
  t49 = std::atan(t49_tmp * t42);
  t146 = t14 * t142;
  t147 = t16 * t142;
  t152 = ((-(t26 * 1.19016) + t2 * 0.5582682765531648) + t13 *
          3.9069847066296693E-6) + 69.7835345691456;
  t54 = controls[3] * t28;
  t15 = t54 * t32;
  t159 = ((((controls[1] * controls[2] + t54 * 3443.9072847682119) + t2 *
            0.40606054271999992) + t13 * 2.8417741021716482E-6) + t15 * t81 *
          -3443.9072847682119) + 50.757567839999993;
  t54 = std::atan(t49_tmp * t44);
  t26 = t34_tmp * t23;
  t142 = t49 * 19.005;
  t156_tmp = controls[3] * controls[3] * (t18 - 15.0) * t32 * pow(t78, t10 - 1.0);
  t156 = (t5 * 0.40606054271999992 + t119_tmp * 1.1367096408686589E-5) +
    -(t156_tmp * 2.8314851797845978E+6);
  t160 = t6 * t159;
  t162_tmp = controls[3] * t32 * t81;
  b_t162_tmp = controls[3] * 8.4763711968959825 * (t18 - 15.0) * t32 * t81;
  t162 = ((((-(controls[3] * 96429.403973509936) + t162_tmp * 48214.701986754968)
            + t28 * t32 * t81 * 3443.9072847682119) + -(b_t162_tmp *
            17219.536423841058)) + t15 * t79 * t81 * 17219.536423841058) +
    51658.609271523179;
  t78 = t21 * t23;
  t61 = 1.0 / (t78 * (t42 * t42) + 1.0);
  t78 = 1.0 / (t78 * (t44 * t44) + 1.0);
  t15 = std::atan(t49 * 12.67) / 2.0;
  t22 = controls[0] * 10.96 + -(t54 * 10.96);
  t86 = 1.0 / (t49 * t49 * 160.5289 + 1.0);
  t28 = t142 - t15;
  t145_tmp = t9 - t163 * t42;
  t115 = 1.0 / (t28 * t28 + 1.0);
  t15 = std::atan(-t142 + t15) * 1.3;
  t13 = 1.0 / (t22 * t22 + 1.0);
  t117 = std::cos(t15);
  t28 = std::sin(t15);
  t22 = (-(controls[0] * 16.44) + t54 * 16.44) + std::atan(t22) / 2.0;
  t15 = t49_tmp * t61;
  t153 = t15 * 26.1288342 + -(t15 * t86 * 8.7096114);
  t15 = (t26 * t42 + 1.0) * t61;
  t155 = t15 * 19.005 + -(t15 * t86 * 6.335);
  t98 = t13 * 5.48;
  t142 = std::atan(t22) * 1.3;
  t15 = (t26 * t44 - 1.0) * t78;
  t157 = t15 * 16.44 + t15 * t13 * -5.48;
  t15 = t78 * (t9 + t163 * t44);
  t161 = t15 * 16.44 + t15 * t13 * -5.48;
  t125 = 1.0 / (t22 * t22 + 1.0);
  t126 = std::sin(t142);
  t22 = t16 * t126;
  in1val1_tmp = t6 * t28;
  b_in1val1_tmp = t3 * t159;
  in1val1 = ((t146 * -0.00080710250201775633 + in1val1_tmp * 3.1862873284907178)
             + t22 * 3.6807102502017761) - b_in1val1_tmp / 1239.0;
  t127 = std::cos(t142);
  t15 = t49_tmp * t78;
  t159 = t15 * 19.5662304 + -(t15 * t13 * 6.5220768);
  t44 = t22 * 4560.4;
  t15 = t14 * t126;
  t26 = t3 * t28;
  t163 = ((t15 * 4560.4 + t26 * 3947.81) + t147) + t160;
  in3val1 = states[2] + t20 * t163 / 1239.0;
  t49_tmp = (t28 * 3.0979492582191779 - t4 * t126 * 3.097948438356164) - t7 *
    t152 / 1752.0;

  /*  Hessian Jacobian for tpc2db278e_9461_4022_bd68_94b600669896 */
  /*  Calculation of Jacobian with respect to function global input for tpc2db278e_9461_4022_bd68_94b600669896 */
  /* === Call tpc5c59c9c_faa3_4db8_910e_3caccb09abd0 ========================== */
  /* TPC5C59C9C_FAA3_4DB8_910E_3CACCB09ABD0 */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9] = TPC5C59C9C_FAA3_4DB8_910E_3CACCB09ABD0(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     16-Jun-2020 17:36:10 */
  t2 = states[4] * controls[4];
  b_t3 = states[3] + states[5];
  t78 = std::cos(b_t3);
  t28 = std::sin(b_t3);
  t23 = states[1] * t78;
  t49 = 1.0 / (t2 - 1.0);
  t9 = t49 * t49;
  t10 = t23 * t49;
  in4val1_tmp = states[1] * t28;
  in5val1 = states[2] + controls[4] * t10;
  t54 = in4val1_tmp * t49;
  t42 = controls[4] * t54;

  /*  Hessian Jacobian for tpc5c59c9c_faa3_4db8_910e_3caccb09abd0 */
  /*  Calculation of Jacobian with respect to function global input for tpc5c59c9c_faa3_4db8_910e_3caccb09abd0 */
  /* === Call tp59c10185_e21b_4bbc_8d36_f4df91987fc9 ========================== */
  /*  Hessian Jacobian for tp59c10185_e21b_4bbc_8d36_f4df91987fc9 */
  /*  Calculation of Jacobian with respect to function global input for tp59c10185_e21b_4bbc_8d36_f4df91987fc9 */
  /* === Call tp0f466f37_8fd8_4d3b_9b59_6b6a054367ed ========================== */
  /* TP0F466F37_8FD8_4D3B_9B59_6B6A054367ED */
  /*     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9,OUT10,OUT11,OUT12,OUT13,OUT14,OUT15,OUT16,OUT17,OUT18,OUT19,OUT20,OUT21] = TP0F466F37_8FD8_4D3B_9B59_6B6A054367ED(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.4. */
  /*     16-Jun-2020 14:12:56 */
  b_t2 = 1.0 / -t10;
  b_t3 = b_t2 * b_t2;

  /*  Hessian Jacobian for tp0f466f37_8fd8_4d3b_9b59_6b6a054367ed */
  t22 = t6 * t115 * t117;
  t142 = t16 * t125 * t127;
  t13 = t61 * t86 * t145_tmp * -6.335 + t61 * t145_tmp * 19.005;
  b_t14[0] = ((t14 * t119 * -0.00080710250201775633 - t3 * t156 / 1239.0) - t22 *
              t13 * 4.1421735270379338) - t142 * t161 * 4.7849233252623078;
  t15 = t15 * 3.6807102502017761 + t147 / 1239.0;
  b_t14[1] = (((t15 + t160 / 1239.0) + t26 * 3.1862873284907178) - t22 * t155 *
              4.1421735270379338) + t142 * t157 * 4.7849233252623078;
  b_t14[2] = t22 * t153 * -4.1421735270379338 + t142 * t159 * 4.7849233252623078;
  b_t14[3] = t15 + t16 * (t98 - 16.44) * t125 * t127 * 4.7849233252623078;
  b_t14[4] = controls[2] * t3 * -0.00080710250201775633 + t14 * (controls[2] -
    1.0) / 1239.0;
  b_t14[5] = controls[1] * t3 * -0.00080710250201775633 + controls[1] * t14 /
    1239.0;
  b_t14[6] = t3 * t162 / 1239.0;
  t15 = t115 * t117;
  t22 = t4 * t125 * t127;
  b_t7[0] = (t7 * (t5 * 0.5582682765531648 + t119_tmp * 1.562793882651867E-5) *
             -0.00057077625570776263 - t15 * t13 * 4.0273340356849312) + t22 *
    t161 * 4.0273329698630143;
  b_t7[1] = t15 * t155 * -4.0273340356849312 - t22 * t157 * 4.0273329698630143;
  b_t7[2] = t15 * t153 * -4.0273340356849312 - t22 * t159 * 4.0273329698630143;
  b_t7[3] = (t7 * t126 * 3.097948438356164 - t4 * t152 / 1752.0) - t4 * (t98 -
    16.44) * t125 * t127 * 4.0273329698630143;
  b_t7[4] = t7 * (controls[2] * 1.19016 - 1.19016) / 1752.0;
  b_t7[5] = controls[1] * t7 * 0.00067931506849315071;
  b_t7[6] = 0.0;
  t15 = t3 * t115 * t117;
  t22 = t14 * t125 * t127;
  b_t21[0] = t21 * t163 * -0.00080710250201775633 + t20 * (((t16 * t119 + t6 *
    t156) - t15 * t13 * 5132.153) - t22 * t161 * 5928.52) / 1239.0;
  b_t21[1] = t20 * (((((t44 - t146) + in1val1_tmp * 3947.81) - b_in1val1_tmp) +
                     t15 * t155 * 5132.153) - t22 * t157 * 5928.52) *
    -0.00080710250201775633;
  b_t21[2] = t20 * (t15 * t153 * 5132.153 - t22 * t159 * 5928.52) *
    -0.00080710250201775633 + 1.0;
  b_t21[3] = t20 * ((-t44 + t146) + t14 * (t98 - 16.44) * t125 * t127 * 5928.52)
    / 1239.0;
  b_t21[4] = t20 * (controls[2] * t6 - t16 * (controls[2] - 1.0)) / 1239.0;
  b_t21[5] = t20 * (controls[1] * t6 - controls[1] * t16) / 1239.0;
  b_t21[6] = t34_tmp * t162 * -0.00080710250201775633;
  dv[0] = 0.0;
  dv[1] = t28;
  dv[2] = t23;
  dv[3] = 0.0;
  dv[4] = t23;
  dv[5] = 0.0;
  dv1[0] = 1.0;
  dv1[1] = controls[4] * t78 * t49;
  dv1[2] = -t42;
  dv1[3] = -(controls[4] * controls[4]) * t23 * t9;
  dv1[4] = -t42;
  dv1[5] = t10 - t2 * t23 * t9;
  dv2[0] = 0.0;
  dv2[1] = -t78 * t49;
  dv2[2] = t54;
  dv2[3] = controls[4] * t23 * t9;
  dv2[4] = t54;
  dv2[5] = states[4] * t23 * t9;
  for (i = 0; i < 12; i++) {
    t142 = 0.0;
    t54 = 0.0;
    t26 = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      i2 = b[i1 + 7 * i];
      t142 += b_t14[i1] * static_cast<double>(i2);
      t54 += b_t7[i1] * static_cast<double>(i2);
      t26 += b_t21[i1] * static_cast<double>(i2);
    }

    t78 = 0.0;
    t13 = 0.0;
    t28 = 0.0;
    for (i1 = 0; i1 < 6; i1++) {
      i2 = b_b[i1 + 6 * i];
      t78 += dv[i1] * static_cast<double>(i2);
      t13 += dv1[i1] * static_cast<double>(i2);
      t28 += dv2[i1] * static_cast<double>(i2);
    }

    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i] = t142;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 1] = t54;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 2] = t26;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 3] = t78;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 4] = t13;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 5] = t28;
    c_tmp_j_input_tp0f466f37_8fd8_4[7 * i + 6] = 0.0;
  }

  /*  Calculation of Jacobian with respect to function global input for tp0f466f37_8fd8_4d3b_9b59_6b6a054367ed */
  /*  Combine Variables to statesdot */
  statesdot[0] = b_t2;
  statesdot[1] = in1val1 * b_t2;
  statesdot[2] = t49_tmp * b_t2;
  statesdot[3] = in3val1 * b_t2;
  statesdot[4] = in4val1_tmp * b_t2;
  statesdot[5] = in5val1 * b_t2;
  statesdot[6] = b_t2;
  b_t14[0] = 0.0;
  b_t14[1] = 0.0;
  b_t14[2] = 0.0;
  b_t14[3] = 0.0;
  b_t14[4] = 0.0;
  b_t14[5] = -b_t3;
  b_t14[6] = 0.0;
  b_t7[0] = b_t2;
  b_t7[1] = 0.0;
  b_t7[2] = 0.0;
  b_t7[3] = 0.0;
  b_t7[4] = 0.0;
  b_t7[5] = -in1val1 * b_t3;
  b_t7[6] = 0.0;
  b_t21[0] = 0.0;
  b_t21[1] = b_t2;
  b_t21[2] = 0.0;
  b_t21[3] = 0.0;
  b_t21[4] = 0.0;
  b_t21[5] = -t49_tmp * b_t3;
  b_t21[6] = 0.0;
  dv3[0] = 0.0;
  dv3[1] = 0.0;
  dv3[2] = b_t2;
  dv3[3] = 0.0;
  dv3[4] = 0.0;
  dv3[5] = -in3val1 * b_t3;
  dv3[6] = 0.0;
  dv4[0] = 0.0;
  dv4[1] = 0.0;
  dv4[2] = 0.0;
  dv4[3] = b_t2;
  dv4[4] = 0.0;
  dv4[5] = -in4val1_tmp * b_t3;
  dv4[6] = 0.0;
  dv5[0] = 0.0;
  dv5[1] = 0.0;
  dv5[2] = 0.0;
  dv5[3] = 0.0;
  dv5[4] = b_t2;
  dv5[5] = -in5val1 * b_t3;
  dv5[6] = 0.0;
  dv6[0] = 0.0;
  dv6[1] = 0.0;
  dv6[2] = 0.0;
  dv6[3] = 0.0;
  dv6[4] = 0.0;
  dv6[5] = -b_t3;
  dv6[6] = b_t2;

  /*  Combine Variables to outputs */
  outputs[0] = states[1] * 17.21953642384106;
  t15 = controls[3] * (t18 - 15.0);
  t22 = controls[3] * (t18 - 15.0) * t32 * t81;
  outputs[1] = t15 * -1040.06 + t22 * 1040.06;
  outputs[2] = t15 * -200.0 + t22 * 200.0;
  for (i = 0; i < 12; i++) {
    t142 = 0.0;
    t54 = 0.0;
    t26 = 0.0;
    t78 = 0.0;
    t13 = 0.0;
    t28 = 0.0;
    t15 = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      t22 = c_tmp_j_input_tp0f466f37_8fd8_4[i1 + 7 * i];
      t142 += b_t14[i1] * t22;
      t54 += b_t7[i1] * t22;
      t26 += b_t21[i1] * t22;
      t78 += dv3[i1] * t22;
      t13 += dv4[i1] * t22;
      t28 += dv5[i1] * t22;
      t15 += dv6[i1] * t22;
    }

    j_statesdot[7 * i] = t142;
    j_statesdot[7 * i + 1] = t54;
    j_statesdot[7 * i + 2] = t26;
    j_statesdot[7 * i + 3] = t78;
    j_statesdot[7 * i + 4] = t13;
    j_statesdot[7 * i + 5] = t28;
    j_statesdot[7 * i + 6] = t15;
    t142 = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      t142 += dv8[i1] * static_cast<double>(b[i1 + 7 * i]);
    }

    dv7[i] = t142;
  }

  b_t14[0] = t156_tmp * 855108.52429494867;
  b_t14[1] = 0.0;
  b_t14[2] = 0.0;
  b_t14[3] = 0.0;
  b_t14[4] = 0.0;
  b_t14[5] = 0.0;
  t22 = (t18 - 15.0) * t32 * t81;
  t142 = controls[3] * (t18 - 15.0) * t32 * t79 * t81;
  b_t14[6] = ((((controls[3] * -29121.68 + t162_tmp * 14560.84) + t22 * 1040.06)
               - b_t162_tmp * 5200.3) + t142 * 5200.3) + 15600.9;
  b_t7[0] = t156_tmp * 164434.46037631459;
  b_t7[1] = 0.0;
  b_t7[2] = 0.0;
  b_t7[3] = 0.0;
  b_t7[4] = 0.0;
  b_t7[5] = 0.0;
  b_t7[6] = ((((controls[3] * -5600.0 + t162_tmp * 2800.0) + t22 * 200.0) -
              b_t162_tmp * 1000.0) + t142 * 1000.0) + 3000.0;
  for (i = 0; i < 12; i++) {
    t142 = 0.0;
    t54 = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      i2 = b[i1 + 7 * i];
      t142 += b_t14[i1] * static_cast<double>(i2);
      t54 += b_t7[i1] * static_cast<double>(i2);
    }

    j_outputs[3 * i] = dv7[i];
    j_outputs[3 * i + 1] = t142;
    j_outputs[3 * i + 2] = t54;
  }
}

void mb_vehicle_nlp_initialize()
{
}

void mb_vehicle_nlp_terminate()
{
  /* (no terminate code required) */
}

/* End of code generation (mb_vehicle_nlp.cpp) */
