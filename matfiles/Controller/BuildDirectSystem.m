function r = BuildDirectSystem(options)
%OPTIMIZE Summary of this function goes here
%   Detailed explanation goes here

if(~exist('options','var') || isempty(options))
    options = struct();
end


states = [...
    falcon.State('t',       0,          200,        1e-2);...
    falcon.State('v',       5,          200,        1e-1);...
    falcon.State('psi_dot', -inf,       inf,        0.3);...
    falcon.State('beta',    -20/180*pi,	20/180*pi,  1e-1);...
    falcon.State('n',       -2.5,       2.5,        0.5);...
    falcon.State('xi',      -pi/2,      pi/2,       1);...
    falcon.State('objective',0,         inf,        1e-2);...
];

controls = [...
    falcon.Control('delta', -0.51,  0.51,   1);
    falcon.Control('fB',    0,      15000,  1e-4);...
    falcon.Control('zeta',  0.5,    0.5,    1);...      % Currently fixed
    falcon.Control('phi',   0,      1,      1);...
    falcon.Control('C',     -0.2,   0.2,    5,    'fixed', true);
];

outputs = [...
    falcon.Output('n_wheel');...
    falcon.Output('M_wheel');...
    falcon.Output('a_r');...
    falcon.Output('a_f');...
];

mdl = falcon.SimulationModelBuilder('vehicle_direct_nlp', states, controls,'Optimize',false);

options.k1 = 1e-8;
options.k2 = 1e1;

fnames = fieldnames(options);

for i=1:length(fnames)
    if isnumeric(options.(fnames{i})) && length(options.(fnames{i})) == 1
        mdl.addConstant(fnames{i},options.(fnames{i}));
    end
end

mdl.addDerivativeSubsystem(@drivetrain,...
    {'v'},...
    {'M_wheel_unscaled'},...
    'OutputSizes', {[1,1]},...
    'OutputJacobianSparsity', {1});

mdl.addSubsystem(@drivePedal,...
    {'M_wheel_unscaled','phi'},...
    {'M_wheel'});

mdl.addSubsystem(@vehicleModel,...
    {'v','beta','psi_dot','delta','fB','zeta','phi','M_wheel'},...
    {'v_dot','beta_dot','psi_dot_dot','n_wheel','a_r','a_f'});

mdl.addSubsystem(@track,...
    {'psi_dot','v','beta','n','xi','C'},...
    {'s_dot','n_dot','xi_dot'});

mdl.addSubsystem((@(x) 1), {'objective'}, {'objective_dot'})

mdl.addSubsystem(@transformation,...
    {'v_dot','psi_dot_dot','beta_dot','n_dot','xi_dot','s_dot','objective_dot'},...
    {'t_dot_s','v_dot_s','psi_dot_dot_s','beta_dot_s','n_dot_s','xi_dot_s','objective_dot_s'});

mdl.setStateDerivativeNames({'t_dot_s','v_dot_s','psi_dot_dot_s','beta_dot_s','n_dot_s','xi_dot_s','objective_dot_s'});
mdl.setOutputs(outputs);
mdl.Build();