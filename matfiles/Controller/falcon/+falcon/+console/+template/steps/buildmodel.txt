function modelfcn = buildmodel(vars)
    % Create a compiled model handle that runs faster with falcon.m
    % than just plain matlab.

    % The model sources are in a subdirectory. We need to
    % load it before we can use the functions in there.
    addpath models

    % The builder receives all states, controls, outputs and parameters.
    % It builds the file 'fm_mex_mainmodel.mex*' in the project folder.
    % Exclude PhaseTimeXX and FinalTime from the parameters, if unused.
    builder = falcon.SimulationModelBuilder('fm_mex_mainmodel', ...
        'States', vars.states, ...
        'Outputs', vars.outputs, ...
        'Controls', vars.controls, ...
        'Parameters', vars.parameters({{ iif(any(strcmp(type, {'mayer', 'bolza'})), phases + 1, 1) }}:end) ...
    );

    % Tell the builder what output to expect from the model function.
    % The model will always calculate the first order derivative of
    % the states, so these derivative names should fit most uses.
    builder.setStateDerivativeNames({#{% for state in states %}
        '{{ state }}_dot';{% end %}
    #});

    % Add the main model as a 'subsystem'. You can replace this with
    % a series of actual subsystems. The goal is that all inputs
    % to any subsystem can be computed with others. Ultimately
    % the state derivatives listed above must be computed.
    builder.addSubsystem(@mainmodel, ...
        'Inputs', {#{#{{ strjoin(strcat('''', states, ''''), '; ') }}#}, {#{{ strjoin(strcat('''', controls, ''''), '; ') }}#}#}, ...
        'Outputs', {#{#{{ strjoin(strcat('''', states, '_dot'''), '; ') }}#}#} ...
    );

    % ... split above model into multiple subsystems and add them here

    % Now the builder will check the integrity of all subsystems and
    % report any unresolved symbols. If the model is complete, it
    % will compute symbolic derivatives and output a mex file.
    builder.Build();

    % In this optional step, you may inspect the correctness of the
    % first order derivatives, the Jacobian. It will print an
    % approximate error, which should be close to zero.
    builder.CheckDerivatives();

    % Return a function handle to the created mex file.
    modelfcn = str2func(builder.ProjectName);

end

